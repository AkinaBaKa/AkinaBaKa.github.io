<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【东方游戏资源】原曲Midi</title>
    <url>/%E4%B8%9C%E6%96%B9Midi/</url>
    <content><![CDATA[<p>东方游戏&#x2F;专辑的Midi分享<br><strong>直接下载</strong><br><a href="/download/%E4%B8%9C%E6%96%B9midi%E9%9F%B3%E4%B9%90%E6%96%87%E4%BB%B6.zip">点击下载</a></p>
<p>2024&#x2F;6&#x2F;12</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>资源</tag>
        <tag>Midi</tag>
      </tags>
  </entry>
  <entry>
    <title>【东方同人音乐】~Drizzle</title>
    <url>/%E4%B8%9C%E6%96%B9%E9%9F%B3%E4%B9%90Drizzle/</url>
    <content><![CDATA[<p>点击试听<a href="https://www.bilibili.com/video/BV1FJ4m1e7fk">B站</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>Melodic Dubstep</tag>
        <tag>Remix</tag>
      </tags>
  </entry>
  <entry>
    <title>【东方同人音乐】~Autumn Faith</title>
    <url>/%E4%B8%9C%E6%96%B9%E9%9F%B3%E4%B9%90Autumn/</url>
    <content><![CDATA[<p>点击试听<a href="https://www.bilibili.com/video/BV1ac411q7xi">B站</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>Remix</tag>
        <tag>Deep House</tag>
      </tags>
  </entry>
  <entry>
    <title>【东方同人音乐】~Drizzle[Remix]</title>
    <url>/%E4%B8%9C%E6%96%B9%E9%9F%B3%E4%B9%90DrizzleRemix/</url>
    <content><![CDATA[<p>点击试听<a href="https://www.bilibili.com/video/BV1sZ421T7ik">B站</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>Melodic Dubstep</tag>
        <tag>Remix</tag>
      </tags>
  </entry>
  <entry>
    <title>【东方同人音乐】纯心~Pureness</title>
    <url>/%E4%B8%9C%E6%96%B9%E9%9F%B3%E4%B9%90Pureness/</url>
    <content><![CDATA[<p>点击试听<a href="https://www.bilibili.com/video/BV1SN411v7DF">B站</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>Remix</tag>
        <tag>Trance</tag>
      </tags>
  </entry>
  <entry>
    <title>【东方同人音乐】幽梦~Inanimate Dream</title>
    <url>/%E4%B8%9C%E6%96%B9%E9%9F%B3%E4%B9%90Inanimatedream/</url>
    <content><![CDATA[<p>点击试听<a href="https://www.bilibili.com/video/BV1uc411x7dB">B站</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>Remix</tag>
        <tag>Mushup</tag>
      </tags>
  </entry>
  <entry>
    <title>【东方同人音乐】困~Sleepless</title>
    <url>/%E4%B8%9C%E6%96%B9%E9%9F%B3%E4%B9%90Sleepless/</url>
    <content><![CDATA[<p>点击试听<a href="https://www.bilibili.com/video/BV1bH4y1679r">B站</a></p>
]]></content>
      <categories>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>Remix</tag>
        <tag>Trance</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新】C语言程序设计代码大全</title>
    <url>/%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="北理工LeXue乐学题目"><a href="#北理工LeXue乐学题目" class="headerlink" title="北理工LeXue乐学题目"></a><strong>北理工LeXue乐学题目</strong></h1><h2 id="图形题"><a href="#图形题" class="headerlink" title="图形题"></a><strong>图形题</strong></h2><h3 id="2024-06-25-打印图形”字母G”"><a href="#2024-06-25-打印图形”字母G”" class="headerlink" title="2024.06.25 打印图形”字母G”"></a>2024.06.25 打印图形”字母G”</h3> <figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#include</span> &lt;stdio<span class="hljs-selector-class">.h</span>&gt;<br>int <span class="hljs-selector-tag">main</span>(void)<br>&#123;<br>	int num;<br>	<span class="hljs-built_in">scanf</span>(&quot;%d&quot;,&amp;num);<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*num-<span class="hljs-number">1</span>;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;G&quot;);<br>	<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>	<span class="hljs-built_in">for</span>(int y=<span class="hljs-number">0</span>;y&lt;num-<span class="hljs-number">2</span>;y++)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(&quot;G&quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*num-<span class="hljs-number">2</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot;+&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(&quot;G&quot;);<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*num-<span class="hljs-number">2</span>-num;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;+&quot;);<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;G&quot;);<br>	<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>	<span class="hljs-built_in">for</span>(int y=<span class="hljs-number">0</span>;y&lt;num-<span class="hljs-number">2</span>;y++)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(&quot;G&quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*num-<span class="hljs-number">3</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot;+&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;G\n&quot;);<br>	&#125;<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*num-<span class="hljs-number">1</span>;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;G&quot;);<br>	<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>	return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-25-打印图形”LOL”"><a href="#2024-06-25-打印图形”LOL”" class="headerlink" title="2024.06.25 打印图形”LOL”"></a>2024.06.25 打印图形”LOL”</h3><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#include</span> &lt;stdio<span class="hljs-selector-class">.h</span>&gt;<br>int <span class="hljs-selector-tag">main</span>(void)<br>&#123;<br>	int num;<br>	<span class="hljs-built_in">scanf</span>(&quot;%d&quot;,&amp;num);<br>	<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num;n++)<br>		<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>	<span class="hljs-built_in">printf</span>(&quot; *\n&quot;);<br>	<br>	<span class="hljs-built_in">for</span>(int y=<span class="hljs-number">0</span>;y&lt;num-<span class="hljs-number">2</span>;y++)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num;n++)<br>			<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num-<span class="hljs-number">2</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;* *\n&quot;);<br>	&#125;<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>	<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>	<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>	<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num;n++)<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>	<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>	return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-13-打印图形“凹-凸”"><a href="#2024-06-13-打印图形“凹-凸”" class="headerlink" title="2024.06.13 打印图形“凹&#x2F;凸”"></a>2024.06.13 打印图形“凹&#x2F;凸”</h3><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-id">#include</span> &lt;stdio<span class="hljs-selector-class">.h</span>&gt;<br>int <span class="hljs-selector-tag">main</span> (void)<br>&#123;<br>	int num;<br>	<span class="hljs-built_in">scanf</span>(&quot;%d&quot;,&amp;num);<br>	<span class="hljs-built_in">if</span>(num%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">3</span>;n++)<br>		&#123;<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">2</span>;m++)<br>				<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;n++)<br>				<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">2</span>;m++)<br>				<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		&#125;<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">2</span>;m++)<br>			<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;m++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">2</span>;m++)<br>			<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;m++)<br>		&#123;<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num*<span class="hljs-number">3</span>/<span class="hljs-number">2</span>-<span class="hljs-number">3</span>;n++)<br>				<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		&#125;<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num*<span class="hljs-number">3</span>/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>	&#125;<br>	else<br>	&#123;<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>+<span class="hljs-number">2</span>;n++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">3</span>;n++)<br>		&#123;<br>			<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;n++)<br>				<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;num/<span class="hljs-number">2</span>;n++)<br>				<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		&#125;<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>;m++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>;m++)<br>			<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>;m++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		<span class="hljs-built_in">for</span>(int m=<span class="hljs-number">0</span>;m&lt;num/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;m++)<br>		&#123;<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">3</span>*(num/<span class="hljs-number">2</span>)-<span class="hljs-number">2</span>;n++)<br>				<span class="hljs-built_in">printf</span>(&quot; &quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>			<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>		&#125;<br>		<span class="hljs-built_in">for</span>(int n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">3</span>*(num/<span class="hljs-number">2</span>);n++)<br>			<span class="hljs-built_in">printf</span>(&quot;*&quot;);<br>		<span class="hljs-built_in">printf</span>(&quot;\n&quot;);<br>	&#125;<br>	return<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-13-打印图形“冰淇淋”"><a href="#2024-06-13-打印图形“冰淇淋”" class="headerlink" title="2024.06.13 打印图形“冰淇淋”"></a>2024.06.13 打印图形“冰淇淋”</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> flor,wide,high;<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;flor,&amp;wide,&amp;high);<br>	<span class="hljs-comment">//head</span><br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*(flor<span class="hljs-number">-1</span>)+wide/<span class="hljs-number">2</span>;n++)<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*\n&quot;</span>);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*(flor<span class="hljs-number">-1</span>)+wide/<span class="hljs-number">2</span><span class="hljs-number">-1</span>;n++)<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***\n&quot;</span>);<br>	<span class="hljs-comment">//ball</span><br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;flor;p++)<br>	&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;m&lt;high;m++)<br>		&#123;<br>			<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*(flor-p<span class="hljs-number">-1</span>);n++)<br>				<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>			<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;wide+p*<span class="hljs-number">4</span>;n++)<br>				<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>		&#125;<br>	&#125;<br>	<span class="hljs-comment">//buttom</span><br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;m&lt;<span class="hljs-number">2</span>*(flor<span class="hljs-number">-1</span>)+wide/<span class="hljs-number">2</span>;m++)<br>	&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;m;n++)<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">4</span>*(flor<span class="hljs-number">-1</span>)+wide<span class="hljs-number">-2</span><span class="hljs-number">-2</span>*m;n++)<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>	&#125;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">2</span>*(flor<span class="hljs-number">-1</span>)+wide/<span class="hljs-number">2</span>;n++)<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*\n&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>


<h2 id="应用题"><a href="#应用题" class="headerlink" title="应用题"></a><strong>应用题</strong></h2><h3 id="2024-06-11-安全的密码"><a href="#2024-06-11-安全的密码" class="headerlink" title="2024.06.11 安全的密码"></a>2024.06.11 安全的密码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cirno</span> <span class="hljs-params">(<span class="hljs-type">char</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> num;<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>	<span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-keyword">while</span>(num--&gt;<span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-type">char</span> baka[<span class="hljs-number">100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>		<span class="hljs-built_in">gets</span>(baka);<br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(baka)&lt;<span class="hljs-number">6</span>)<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not Safe\n&quot;</span>);<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-built_in">cirno</span>(baka);<br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cirno</span> <span class="hljs-params">(<span class="hljs-type">char</span>* busu)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> nu=<span class="hljs-number">0</span>,en=<span class="hljs-number">0</span>,es=<span class="hljs-number">0</span>,caps=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-built_in">strlen</span>(busu);n++)<br>	&#123;<br>		<span class="hljs-keyword">if</span>((busu[n]&gt;=<span class="hljs-string">&#x27;!&#x27;</span>&amp;&amp;busu[n]&lt;=<span class="hljs-string">&#x27;/&#x27;</span>)||(busu[n]&gt;=<span class="hljs-string">&#x27;:&#x27;</span>&amp;&amp;busu[n]&lt;=<span class="hljs-string">&#x27;@&#x27;</span>)||(busu[n]&gt;=<span class="hljs-string">&#x27;[&#x27;</span>&amp;&amp;busu[n]&lt;=<span class="hljs-string">&#x27;`&#x27;</span>)||(busu[n]==<span class="hljs-string">&#x27; &#x27;</span>))<br>			es=<span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(busu[n]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;busu[n]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>			nu=<span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(busu[n]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;busu[n]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)<br>			en=<span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((busu[n]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;busu[n]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>))<br>			caps=<span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-comment">//printf(&quot;%d %d %d\n&quot;,nu,en,es);</span><br>	<span class="hljs-keyword">if</span>(nu+en+es+caps==<span class="hljs-number">1</span>)<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not Safe\n&quot;</span>);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nu+en+es+caps==<span class="hljs-number">2</span>)<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Medium Safe\n&quot;</span>);<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nu+en+es+caps&gt;=<span class="hljs-number">3</span>)<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Safe\n&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-25-大家一起做游戏-小学生"><a href="#2024-06-25-大家一起做游戏-小学生" class="headerlink" title="2024.06.25 大家一起做游戏&#x2F;小学生"></a>2024.06.25 大家一起做游戏&#x2F;小学生</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>	<span class="hljs-type">char</span> busu[<span class="hljs-number">6</span>];<br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> * next;<br>&#125; NODE;<br><br>NODE * head;<br>NODE * end;<br>NODE * mid;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">import</span> <span class="hljs-params">(<span class="hljs-type">char</span> *)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">subtract</span> <span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> n;<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>	<span class="hljs-type">int</span> baka[n];<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;m&lt;n;m++)<br>		<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;baka[m]);<br>	mid = (NODE *)<span class="hljs-built_in">malloc</span>( <span class="hljs-built_in">sizeof</span>(NODE) );  <br>    mid-&gt;next = <span class="hljs-literal">NULL</span>;  <br>    <span class="hljs-built_in">strcpy</span>(mid-&gt;busu,<span class="hljs-string">&quot;eijuy&quot;</span>);  <br>    <br>    head = (NODE *)<span class="hljs-built_in">malloc</span>( <span class="hljs-built_in">sizeof</span>(NODE) );<br>    head-&gt;next = mid;<br>    <span class="hljs-built_in">strcpy</span>(head-&gt;busu,<span class="hljs-string">&quot;-1&quot;</span>);  <br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;n;p++)<br>    &#123;<br>    	<span class="hljs-type">char</span> name[<span class="hljs-number">100</span>];<br>    	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,name);<br>    	<span class="hljs-built_in">import</span>(name);<br>	&#125;<br><br>	end = (NODE *)<span class="hljs-built_in">malloc</span>( <span class="hljs-built_in">sizeof</span>(NODE) );  <br>	head-&gt;next-&gt;next=end;<br>    end-&gt;next = <span class="hljs-literal">NULL</span>;  <br>    <span class="hljs-built_in">strcpy</span>(end-&gt;busu,<span class="hljs-string">&quot;vrqfb&quot;</span>);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> q=<span class="hljs-number">0</span>;q&lt;n;q++)<br>    &#123;<br>    	<span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>    	<span class="hljs-keyword">if</span>(q!=<span class="hljs-number">0</span>)<br>    	&#123;<br>    		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=q;x&gt;=<span class="hljs-number">0</span>;x--)<br>    			<span class="hljs-keyword">if</span>(baka[x]&lt;baka[q])<br>    				flag++;<br>    		<span class="hljs-built_in">subtract</span>(baka[q]-flag);<br>    	&#125;<br>    	<span class="hljs-keyword">else</span><br>    		<span class="hljs-built_in">subtract</span>(baka[<span class="hljs-number">0</span>]);<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">import</span> <span class="hljs-params">(<span class="hljs-type">char</span> *name)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">while</span>(head-&gt;next!=<span class="hljs-literal">NULL</span>)<br>        head=head-&gt;next;<br>    NODE* p=(NODE*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(NODE));<br>    <span class="hljs-built_in">strcpy</span>(p-&gt;busu,name);<br>    p-&gt;next=<span class="hljs-literal">NULL</span>;<br>    head-&gt;next=p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">subtract</span> <span class="hljs-params">(<span class="hljs-type">int</span> baka)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>	NODE * p;<br>	NODE * q;<br>	p=mid;<br>	<span class="hljs-keyword">while</span>(count&lt;baka<span class="hljs-number">-1</span>)<br>	&#123;<br>		p = p-&gt;next;<br>		count++;<br>	&#125;<br>	q=p-&gt;next;<br>    p-&gt;next=q-&gt;next;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s\n&quot;</span>,p-&gt;busu,q-&gt;next-&gt;busu);<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-25-开大招"><a href="#2024-06-25-开大招" class="headerlink" title="2024.06.25 开大招"></a>2024.06.25 开大招</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span><span class="hljs-comment">//AWQEWAEQWQEE</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span> <span class="hljs-params">(<span class="hljs-type">char</span>)</span></span>;<br><span class="hljs-type">int</span> count=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> Qcd=<span class="hljs-number">0</span>,Wcd=<span class="hljs-number">0</span>,Ecd=<span class="hljs-number">0</span>,Acd=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> lst;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">char</span> skill[<span class="hljs-number">1000</span>];<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,skill);<br>	lst=skill[<span class="hljs-number">0</span>];<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">1</span>;n&lt;<span class="hljs-built_in">strlen</span>(skill);n++)<br>	&#123;<br>		<span class="hljs-built_in">judge</span>(skill[n]);<br>		<span class="hljs-keyword">if</span>(Qcd&gt;<span class="hljs-number">0</span>)<br>			Qcd--;<br>		<span class="hljs-keyword">if</span>(Wcd&gt;<span class="hljs-number">0</span>)<br>			Wcd--;<br>		<span class="hljs-keyword">if</span>(Ecd&gt;<span class="hljs-number">0</span>)<br>			Ecd--;<br>		<span class="hljs-keyword">if</span>(Acd&gt;<span class="hljs-number">0</span>)<br>			Acd--;<br>		<span class="hljs-keyword">if</span>(count&gt;=<span class="hljs-number">6</span>)<br>			<span class="hljs-keyword">break</span>;<br>	&#125;<br>	<span class="hljs-type">char</span> bol;<br>	<span class="hljs-keyword">if</span>(count&gt;<span class="hljs-number">5</span>)<br>		bol=<span class="hljs-string">&#x27;Y&#x27;</span>;<br>	<span class="hljs-keyword">else</span><br>		bol=<span class="hljs-string">&#x27;N&#x27;</span>; <br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %c\n&quot;</span>,count,bol);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span> <span class="hljs-params">(<span class="hljs-type">char</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> bl=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">switch</span>(c)<br>	&#123;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Q&#x27;</span>:<br>			<span class="hljs-keyword">if</span>(Qcd==<span class="hljs-number">0</span>)<br>			&#123;<br>				bl=<span class="hljs-number">1</span>;<br>				Qcd+=<span class="hljs-number">2</span>;<br>			&#125;<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;W&#x27;</span>:<br>			<span class="hljs-keyword">if</span>(Wcd==<span class="hljs-number">0</span>)<br>			&#123;<br>				bl=<span class="hljs-number">1</span>;<br>				Wcd+=<span class="hljs-number">4</span>;<br>			&#125;<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br>			<span class="hljs-keyword">if</span>(Ecd==<span class="hljs-number">0</span>)<br>			&#123;<br>				bl=<span class="hljs-number">1</span>;<br>				Ecd+=<span class="hljs-number">3</span>;<br>			&#125;<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>			<span class="hljs-keyword">if</span>(Acd==<span class="hljs-number">0</span>)<br>			&#123;<br>				bl=<span class="hljs-number">1</span>;<br>				Acd+=<span class="hljs-number">1</span>;<br>			&#125;<br>			<span class="hljs-keyword">break</span>;<br>	&#125;<br>	<span class="hljs-keyword">if</span>(bl==<span class="hljs-number">1</span>)<br>		<span class="hljs-keyword">if</span>(c!=lst)<br>		&#123;<br>			count++;<br>			lst=c;<br>		&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-25-象棋中的马-没做完"><a href="#2024-06-25-象棋中的马-没做完" class="headerlink" title="2024.06.25 象棋中的马&#x2F;没做完"></a>2024.06.25 象棋中的马&#x2F;没做完</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/* PRESET CODE BEGIN - NEVER TOUCH CODE BELOW */</span>  <br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span>   </span><br><span class="hljs-type">int</span> n,m,x,y,a[<span class="hljs-number">401</span>][<span class="hljs-number">401</span>];  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> step)</span></span>;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">401</span>;i++)  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">401</span>;j++)  <br>    a[i][j]=<span class="hljs-number">-1</span>;<span class="hljs-comment">//这里初始化-1 表示为无法到达   </span><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d&quot;</span>,a[i][j]);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br><span class="hljs-comment">/* PRESET CODE END - NEVER TOUCH CODE ABOVE */</span> <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> step)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span>(step&gt;n*m)<br>	    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">if</span>(x&gt;m||y&gt;n||x&lt;=<span class="hljs-number">0</span>||y&lt;=<span class="hljs-number">0</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">if</span>(a[x][y]&gt;step||a[x][y]==<span class="hljs-number">-1</span>)<br>		a[x][y]=step;<br><br>	<br>	<br>	<span class="hljs-type">int</span> dub=step;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">+2</span>,y<span class="hljs-number">+1</span>,++step);<br>	step=dub;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">+2</span>,y<span class="hljs-number">-1</span>,++step);<br>	step=dub;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-2</span>,y<span class="hljs-number">+1</span>,++step);<br>	step=dub;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-2</span>,y<span class="hljs-number">-1</span>,++step);<br>	step=dub;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">+1</span>,y<span class="hljs-number">+2</span>,++step);<br>	step=dub;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y<span class="hljs-number">+2</span>,++step);<br>	step=dub;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">+1</span>,y<span class="hljs-number">-2</span>,++step);<br>	step=dub;<br>	<span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y<span class="hljs-number">-2</span>,++step);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-12-凯撒密码"><a href="#2024-06-12-凯撒密码" class="headerlink" title="2024.06.12 凯撒密码"></a>2024.06.12 凯撒密码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span> <span class="hljs-params">(<span class="hljs-type">char</span>*)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">seed</span> <span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sort</span> <span class="hljs-params">(<span class="hljs-type">int</span>*,<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">outPut</span><span class="hljs-params">(<span class="hljs-type">char</span>*,<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">char</span> Rome[<span class="hljs-number">1000</span>];<br>	<span class="hljs-type">char</span> Txt[<span class="hljs-number">10000</span>];<br>	<span class="hljs-type">int</span> Num[<span class="hljs-number">25</span>];<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,Rome);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;p&lt;<span class="hljs-number">25</span>;p++)<br>		<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;Num[p]);<br>	<span class="hljs-type">int</span> key=<span class="hljs-built_in">sort</span>(Num,<span class="hljs-built_in">seed</span>(<span class="hljs-built_in">change</span>(Rome)));<br>	<span class="hljs-built_in">getchar</span>();<br>	<span class="hljs-built_in">gets</span>(Txt);<br>	<span class="hljs-built_in">puts</span>(<span class="hljs-built_in">outPut</span>(Txt,key));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span> <span class="hljs-params">(<span class="hljs-type">char</span>* str)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> pst=<span class="hljs-number">0</span>,now=<span class="hljs-number">0</span>,tmp,tot=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-built_in">strlen</span>(str);n++)<br>	&#123;<br>		<span class="hljs-keyword">switch</span>(str[n])<br>		&#123;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;I&#x27;</span>:now=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;V&#x27;</span>:now=<span class="hljs-number">5</span>;<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>:now=<span class="hljs-number">10</span>;<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:now=<span class="hljs-number">50</span>;<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:now=<span class="hljs-number">100</span>;<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:now=<span class="hljs-number">500</span>;<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>:now=<span class="hljs-number">1000</span>;<span class="hljs-keyword">break</span>;<br>			<span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span>;<br>		&#125;<br>		tmp=now;<br>		<span class="hljs-keyword">if</span>(pst&lt;now&amp;&amp;pst!=<span class="hljs-number">0</span>)<br>			now=now<span class="hljs-number">-2</span>*pst;<br>		pst=tmp;<br>		tot+=now;<br>	&#125;<br>	<span class="hljs-keyword">return</span> tot;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">seed</span> <span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-type">int</span> sed=<span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">1</span>;;n*=<span class="hljs-number">10</span>)<br>		&#123;<br>			<span class="hljs-keyword">if</span>(s%n==s)<br>				<span class="hljs-keyword">break</span>;<br>			sed+=s/n%<span class="hljs-number">10</span>;<br>		&#125;<br>		s=sed;<br>		<span class="hljs-keyword">if</span>(sed%<span class="hljs-number">10</span>==sed)<br>			<span class="hljs-keyword">return</span> sed;<br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sort</span> <span class="hljs-params">(<span class="hljs-type">int</span>* it,<span class="hljs-type">int</span> sed)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">25</span>;i++)<br>	&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">25</span>-i<span class="hljs-number">-1</span>;j++)<br>		&#123;<br>			<span class="hljs-keyword">if</span>(it[j]&gt;it[j<span class="hljs-number">+1</span>])<br>			&#123;<br>				<span class="hljs-type">int</span> tmp=it[j];<br>				it[j]=it[j<span class="hljs-number">+1</span>];<br>				it[j<span class="hljs-number">+1</span>]=tmp;	<br>			&#125;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> it[sed<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">outPut</span><span class="hljs-params">(<span class="hljs-type">char</span>* txt,<span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> swch=key%<span class="hljs-number">26</span>;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,swch);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-built_in">strlen</span>(txt);n++)<br>	&#123;<br>		<span class="hljs-keyword">if</span>(txt[n]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;txt[n]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)<br>		&#123;<br>			<span class="hljs-keyword">if</span>((<span class="hljs-type">int</span>)txt[n]+swch&gt;<span class="hljs-number">122</span>)<br>				txt[n]+=(swch<span class="hljs-number">-26</span>);<br>			<span class="hljs-keyword">else</span><br>				txt[n]+=swch;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> txt;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-11-全能的战士"><a href="#2024-06-11-全能的战士" class="headerlink" title="2024.06.11 全能的战士"></a>2024.06.11 全能的战士</h3><figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-keyword">int</span> main(void)&#123;<br>	<span class="hljs-keyword">int</span> n,n1,n2,n3,n12,n13,n23;<br>	scanf(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span>&quot;</span>,&amp;n,&amp;n1,&amp;n2,&amp;n3,&amp;n12,&amp;n13,&amp;n23);<br>	<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,n-(n1+n2+n3-n12-n13-n23));<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-13-最短路径"><a href="#2024-06-13-最短路径" class="headerlink" title="2024.06.13 最短路径"></a>2024.06.13 最短路径</h3><figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-keyword">int</span> main(void)<br>&#123;<br>	<span class="hljs-keyword">int</span> x1,y1;<br>	<span class="hljs-keyword">int</span> x2,y2;<br>	scanf(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span> <span class="hljs-variable">%d</span>&quot;</span>,&amp;x2,&amp;y2,&amp;x1,&amp;y1);<br>	<span class="hljs-keyword">if</span>(x1==<span class="hljs-number">0</span>&amp;&amp;x2==<span class="hljs-number">0</span>&amp;&amp;y1==<span class="hljs-number">0</span>&amp;&amp;y2==<span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;1\n(0,0)\n&quot;</span>);<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">int</span> fst=<span class="hljs-number">0</span>,sec=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">int</span> mid1,mid2;<br>	mid1=(x1-<span class="hljs-number">1</span>)*(y1-<span class="hljs-number">1</span>);<br>	mid2=(x2-x1-<span class="hljs-number">1</span>)*(y2-y1-<span class="hljs-number">1</span>);<br>	<span class="hljs-keyword">if</span>(mid2&lt;<span class="hljs-number">0</span>)<br>		mid2/=-<span class="hljs-number">1</span>;<br>	fst=x1*y1;<br>	sec=(x2-x1)*(y2-y1);<br>	<span class="hljs-keyword">if</span>(sec&lt;<span class="hljs-number">0</span>)<br>		sec/=-<span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%d</span>\n&quot;</span>,(fst+<span class="hljs-number">1</span>+mid1)*(sec+<span class="hljs-number">1</span>+mid2));<br>	<span class="hljs-keyword">int</span> <span class="hljs-keyword">x</span>=<span class="hljs-number">0</span>,<span class="hljs-keyword">y</span>=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;;n++)<br>	&#123;<br>		<span class="hljs-keyword">if</span>(<span class="hljs-keyword">x</span>==x1&amp;&amp;<span class="hljs-keyword">y</span>==y1)<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;(<span class="hljs-variable">%d</span>,<span class="hljs-variable">%d</span>)&quot;</span>,<span class="hljs-keyword">x</span>,<span class="hljs-keyword">y</span>);<br>		<span class="hljs-keyword">if</span>(<span class="hljs-keyword">x</span>==x1)<br>			<span class="hljs-keyword">y</span>++;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">x</span>++;<br>	&#125;<br>	<span class="hljs-keyword">x</span>=x1,<span class="hljs-keyword">y</span>=y1;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;;n++)<br>	&#123;<br>		<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;(<span class="hljs-variable">%d</span>,<span class="hljs-variable">%d</span>)&quot;</span>,<span class="hljs-keyword">x</span>,<span class="hljs-keyword">y</span>);<br>		<span class="hljs-keyword">if</span>(<span class="hljs-keyword">x</span>==x2&amp;&amp;<span class="hljs-keyword">y</span>==y2)<br>			<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">if</span>(<span class="hljs-keyword">x</span>==x2)<br>			<span class="hljs-keyword">y</span>++;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">x</span>++;<br>	&#125;<br>	<span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="递归题"><a href="#递归题" class="headerlink" title="递归题"></a><strong>递归题</strong></h2><h3 id="2024-06-13-递归函数"><a href="#2024-06-13-递归函数" class="headerlink" title="2024.06.13 递归函数"></a>2024.06.13 递归函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PRESET CODE BEGIN - NEVER TOUCH CODE BELOW */</span>  <br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintChar</span><span class="hljs-params">(<span class="hljs-type">int</span> number,<span class="hljs-type">char</span> c)</span></span>&#123;  <br>    <span class="hljs-type">int</span> i;  <br>    <span class="hljs-keyword">for</span> ( i=<span class="hljs-number">0</span> ; i&lt; number; i++)  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,c);  <br>&#125;  <br> <br><span class="hljs-comment">// ????-----------???? </span><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">RecursionFunction</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">char</span> c)</span></span>;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-type">char</span> c; <span class="hljs-type">int</span> n;  <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %c&quot;</span>,&amp;n,&amp;c);  <br>    <span class="hljs-built_in">RecursionFunction</span>(n,c);  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">/* PRESET CODE END - NEVER TOUCH CODE ABOVE */</span>  <br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">RecursionFunction</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">char</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RecursionFunction has been over !\n&quot;</span>);<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-built_in">PrintChar</span>(n,c);<br>	<span class="hljs-keyword">switch</span>(c)<br>	&#123;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:n-=<span class="hljs-number">1</span>;c=<span class="hljs-string">&#x27;*&#x27;</span>;<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:n+=<span class="hljs-number">2</span>;c=<span class="hljs-string">&#x27;?&#x27;</span>;<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:n+=<span class="hljs-number">3</span>;c=<span class="hljs-string">&#x27;+&#x27;</span>;<span class="hljs-keyword">break</span>;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:n-=<span class="hljs-number">6</span>;c=<span class="hljs-string">&#x27;#&#x27;</span>;<span class="hljs-keyword">break</span>;<br>	&#125;<br>	<span class="hljs-built_in">RecursionFunction</span>(n,c);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="链表题"><a href="#链表题" class="headerlink" title="链表题"></a><strong>链表题</strong></h2><h3 id="2024-06-12-链表查找"><a href="#2024-06-12-链表查找" class="headerlink" title="2024.06.12 链表查找"></a>2024.06.12 链表查找</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PRESET CODE BEGIN - NEVER TOUCH CODE BELOW */</span>  <br>  <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span>  </span><br>  <br><span class="hljs-type">int</span> st=<span class="hljs-number">0</span>,ed=<span class="hljs-number">0</span>;  <br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>  <br>&#123;   <span class="hljs-type">int</span>         data;  <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> * next;  <br>&#125; NODE;  <br>    <br><span class="hljs-function">NODE * <span class="hljs-title">find</span><span class="hljs-params">( NODE * , <span class="hljs-type">int</span> * )</span></span>;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">outputring</span><span class="hljs-params">( NODE * )</span></span>;  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">( <span class="hljs-type">int</span> , <span class="hljs-type">int</span> , NODE * )</span></span>;  <br>    <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">outputring</span><span class="hljs-params">( NODE * pring )</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    NODE * p;  <br>    p = pring;  <br>    <span class="hljs-comment">//printf(&quot;ass%d&quot;, p-&gt;data);  </span><br>    <span class="hljs-keyword">if</span> ( p == <span class="hljs-literal">NULL</span> )  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL&quot;</span>);  <br>    <span class="hljs-keyword">else</span>  <br>        <span class="hljs-keyword">do</span>  <br>        &#123;  <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);  <br>            p = p-&gt;next;  <br>            <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>        &#125;<span class="hljs-keyword">while</span>(p!= pring);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <br>    <span class="hljs-keyword">return</span>;  <br>    <br>&#125;  <br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;   <span class="hljs-type">int</span> n, m;  <br>    NODE * head, * pring;  <br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);  <br>    head = (NODE *)<span class="hljs-built_in">malloc</span>( <span class="hljs-built_in">sizeof</span>(NODE) );  <br>    head-&gt;next = <span class="hljs-literal">NULL</span>;  <br>    head-&gt;data = <span class="hljs-number">-1</span>;  <br>    <br>    <span class="hljs-built_in">change</span>( n, m, head );  <br>    pring = <span class="hljs-built_in">find</span>( head, &amp;n );  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ring=%d\n&quot;</span>, n);  <br>    <span class="hljs-built_in">outputring</span>( pring );  <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br>    <br><span class="hljs-comment">/* Here is waiting for you. </span><br><span class="hljs-comment">void change( int n, int m, NODE * head ) </span><br><span class="hljs-comment">&#123; </span><br><span class="hljs-comment">&#125; </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">NODE * find( NODE * head, int * n ) </span><br><span class="hljs-comment">&#123; </span><br><span class="hljs-comment">&#125; </span><br><span class="hljs-comment">*/</span>  <br>    <br><span class="hljs-comment">/* PRESET CODE END - NEVER TOUCH CODE ABOVE */</span>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">( <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, NODE * head )</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-type">int</span> sh[<span class="hljs-number">1000</span>]=&#123;<span class="hljs-number">0</span>&#125;;  <br>    <span class="hljs-type">int</span> mo[<span class="hljs-number">1000</span>]=&#123;<span class="hljs-number">0</span>&#125;;  <br>    <span class="hljs-type">int</span> bl=<span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;;i++)  <br>    &#123;  <br>        sh[i]=n*<span class="hljs-number">10</span>/m;  <br>        mo[i]=n*<span class="hljs-number">10</span>%m;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)  <br>            <span class="hljs-keyword">if</span>(sh[i]==sh[j]&amp;&amp;mo[i]==mo[j])  <br>            &#123;  <br>                st=j;  <br>                ed=i;  <br>                bl=<span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">break</span>;  <br>            &#125;  <br>        n=mo[i];  <br>          <br>          <br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)  <br>        &#123;  <br>            st=i<span class="hljs-number">+1</span>;  <br>            <span class="hljs-keyword">break</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">if</span>(bl!=<span class="hljs-number">0</span>)  <br>            <span class="hljs-keyword">break</span>;  <br>    &#125;  <br>      <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;st;k++)  <br>    &#123;  <br>        <span class="hljs-keyword">while</span>(head-&gt;next!=<span class="hljs-literal">NULL</span>)  <br>            head=head-&gt;next;  <br>        NODE* p=(NODE*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(NODE));  <br>        p-&gt;data=sh[k];  <br>        p-&gt;next=<span class="hljs-literal">NULL</span>;  <br>        head-&gt;next=p;  <br>    &#125;  <br>    <span class="hljs-keyword">if</span>(bl!=<span class="hljs-number">0</span>)  <br>    &#123;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=st;k&lt;ed;k++)  <br>        &#123;  <br>            <span class="hljs-keyword">while</span>(head-&gt;next!=<span class="hljs-literal">NULL</span>)  <br>                head=head-&gt;next;  <br>            NODE* p=(NODE*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(NODE));  <br>            p-&gt;data=sh[k];  <br>            p-&gt;next=<span class="hljs-literal">NULL</span>;  <br>            head-&gt;next=p;  <br>        &#125;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function">NODE * <span class="hljs-title">find</span><span class="hljs-params">( NODE * head, <span class="hljs-type">int</span> * n )</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">if</span>(ed&gt;st)  <br>    &#123;  <br>        *n=ed-st;  <br>        NODE* a=head-&gt;next;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;st;k++)  <br>            a=a-&gt;next;  <br>        <span class="hljs-comment">//printf(&quot;ass%d&quot;,a-&gt;data);  </span><br>        <span class="hljs-keyword">return</span> a;  <br>    &#125;  <br>    <span class="hljs-keyword">else</span>  <br>    &#123;  <br>        *n=<span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2024-06-11-链表小数节点"><a href="#2024-06-11-链表小数节点" class="headerlink" title="2024.06.11 链表小数节点"></a>2024.06.11 链表小数节点</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* PRESET CODE BEGIN - NEVER TOUCH CODE BELOW */</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> st=<span class="hljs-number">0</span>,ed=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;   <span class="hljs-type">int</span>         data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> * next;<br>&#125; NODE;<br>  <br><span class="hljs-function">NODE * <span class="hljs-title">find</span><span class="hljs-params">( NODE * , <span class="hljs-type">int</span> * )</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">outputring</span><span class="hljs-params">( NODE * )</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">( <span class="hljs-type">int</span> , <span class="hljs-type">int</span> , NODE * )</span></span>;<br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">outputring</span><span class="hljs-params">( NODE * pring )</span></span><br><span class="hljs-function"></span>&#123;<br>    NODE * p;<br>    p = pring;<br>    <span class="hljs-comment">//printf(&quot;ass%d&quot;, p-&gt;data);</span><br>    <span class="hljs-keyword">if</span> ( p == <span class="hljs-literal">NULL</span> )<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<br>            p = p-&gt;next;<br>            <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(p!= pring);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  <br>&#125;<br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;   <span class="hljs-type">int</span> n, m;<br>    NODE * head, * pring;<br>  <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    head = (NODE *)<span class="hljs-built_in">malloc</span>( <span class="hljs-built_in">sizeof</span>(NODE) );<br>    head-&gt;next = <span class="hljs-literal">NULL</span>;<br>    head-&gt;data = <span class="hljs-number">-1</span>;<br>  <br>    <span class="hljs-built_in">change</span>( n, m, head );<br>    pring = <span class="hljs-built_in">find</span>( head, &amp;n );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ring=%d\n&quot;</span>, n);<br>    <span class="hljs-built_in">outputring</span>( pring );<br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>  <br><span class="hljs-comment">/* Here is waiting for you.</span><br><span class="hljs-comment">void change( int n, int m, NODE * head )</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">NODE * find( NODE * head, int * n )</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>  <br><span class="hljs-comment">/* PRESET CODE END - NEVER TOUCH CODE ABOVE */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">( <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, NODE * head )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sh[<span class="hljs-number">1000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> mo[<span class="hljs-number">1000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> bl=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;;i++)<br>    &#123;<br>        sh[i]=n*<span class="hljs-number">10</span>/m;<br>        mo[i]=n*<span class="hljs-number">10</span>%m;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)<br>            <span class="hljs-keyword">if</span>(sh[i]==sh[j]&amp;&amp;mo[i]==mo[j])<br>            &#123;<br>                st=j;<br>                ed=i;<br>                bl=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        n=mo[i];<br>        <br>        <br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>        &#123;<br>            st=i<span class="hljs-number">+1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(bl!=<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;st;k++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(head-&gt;next!=<span class="hljs-literal">NULL</span>)<br>            head=head-&gt;next;<br>        NODE* p=(NODE*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(NODE));<br>        p-&gt;data=sh[k];<br>        p-&gt;next=<span class="hljs-literal">NULL</span>;<br>        head-&gt;next=p;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(bl!=<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=st;k&lt;ed;k++)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(head-&gt;next!=<span class="hljs-literal">NULL</span>)<br>                head=head-&gt;next;<br>            NODE* p=(NODE*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(NODE));<br>            p-&gt;data=sh[k];<br>            p-&gt;next=<span class="hljs-literal">NULL</span>;<br>            head-&gt;next=p;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">NODE * <span class="hljs-title">find</span><span class="hljs-params">( NODE * head, <span class="hljs-type">int</span> * n )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(ed&gt;st)<br>    &#123;<br>        *n=ed-st;<br>        NODE* a=head-&gt;next;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;st;k++)<br>            a=a-&gt;next;<br>        <span class="hljs-comment">//printf(&quot;ass%d&quot;,a-&gt;data);</span><br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        *n=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h1><h2 id="emm暂无-The-Akina-histroy-goes-on"><a href="#emm暂无-The-Akina-histroy-goes-on" class="headerlink" title="emm暂无,The Akina histroy goes on~"></a>emm暂无,The Akina histroy goes on~</h2>]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>代码</tag>
        <tag>C语言</tag>
        <tag>程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新】资源分享</title>
    <url>/%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><strong>1</strong> C Primer plus第六版编程练习答案 <a href="/download/Cpp.pdf">点击下载</a><br><strong>2</strong> 琪露诺的冰屋（4.1新版本）<a href="https://akinabaka.github.io/%E5%86%B0%E5%B1%8B/">点击跳转</a></p>
]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
      </tags>
  </entry>
  <entry>
    <title>【东方同人游戏】琪露诺的冰屋（已更新4.1版本）</title>
    <url>/%E5%86%B0%E5%B1%8B/</url>
    <content><![CDATA[<p>网盘下载（Win旧版）：<a href="https://pan.quark.cn/s/498b7200a746#/list/share">点击下载</a><br><strong>直接下载</strong><br>Win版:<a href="/download/%E5%86%B0%E5%B1%8BWin4.1.rar">点击下载</a><br>Mac版:<a href="/download/%E5%86%B0%E5%B1%8BMac.rar">点击下载</a><br>2024&#x2F;5&#x2F;18</p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>弹幕射击</tag>
      </tags>
  </entry>
  <entry>
    <title>【持续更新】音乐工程/音频分享</title>
    <url>/%E9%9F%B3%E4%B9%90%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><strong>1</strong> lunate的flp压缩包 <a href="/download/lunate.zip">点击下载</a><br><strong>2</strong> 夜雀的flp压缩包 <a href="/download/%E9%9B%80.zip">点击下载</a><br>  <a href="/download/Nightbird.mp3">夜雀音频</a><br><strong>3</strong> 东方游戏原曲Midi<a href="https://akinabaka.github.io/%E4%B8%9C%E6%96%B9Midi/">点击跳转</a></p>
]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
      </tags>
  </entry>
</search>
